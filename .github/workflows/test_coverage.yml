name: Go Tests & Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write
  contents: write
  pages: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          check-latest: true
          cache-dependency-path: |
            ./go.sum

      - name: Install dependencies
        run: |
          go mod tidy
          go install github.com/t-yuki/gocover-cobertura@latest

      - name: Run tests and collect coverage
        run: go test $(go list ./... | grep -v '/cmd/') -coverprofile=coverage.out

      - name: Convert coverage to Cobertura format
        run: $(which gocover-cobertura) < coverage.out > coverage.xml

      - name: Coverage summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          fail_below_min: false
          format: markdown
          indicators: true
          output: both
          thresholds: '70 80'

      - name: Add coverage report to pull request
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Get coverage values
        id: coverage-values
        shell: bash
        run: |
          total=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $total%"
          echo "total=$total" >> $GITHUB_OUTPUT

      - name: Run Benchmarks
        run: go test -bench . -benchmem | tee benchmarks.txt

      - name: Upload Benchmarks Result
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmarks.txt

      - name: Update coverage badge
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          npm i -g badgen-cli
          export COV=${{ steps.coverage-values.outputs.total}}
          COLOR=$(node -p '+process.env.COV >= 55 ? `green` : `orange`')
          mkdir -p badges
          badgen -j coverage -s $COV% -c $COLOR > badges/coverage.svg
