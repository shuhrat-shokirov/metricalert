/*
Package staticlint –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è multichecker.

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä `OsExitAnalyzer`, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–µ—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `os.Exit`
–≤ `main`-—Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ `main`, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–æ–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.

üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø–æ–º–æ—â—å—é `multichecker`:

	```sh
	multichecker -c=1 -all -tags=staticlint ./...
	```
*/
package staticlint

import (
	"go/ast"

	"golang.org/x/tools/go/analysis"
)

// OsExitAnalyzer –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ os.Exit –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main –ø–∞–∫–µ—Ç–∞ main.
var OsExitAnalyzer = &analysis.Analyzer{
	Name: "osexitlint",
	Doc:  "–ó–∞–ø—Ä–µ—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ os.Exit –≤ main-—Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ main",
	Run:  run,
}

func run(pass *analysis.Pass) (interface{}, error) {
	osExitFunc := func(x *ast.ExprStmt) {
		// –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
		// –∏ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è - —ç—Ç–æ os.Exit
		if call, ok := x.X.(*ast.CallExpr); ok {
			if isOsExit(call) {
				pass.Reportf(x.Pos(), "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ os.Exit –≤ main-—Ñ—É–Ω–∫—Ü–∏–∏")
			}
		}
	}

	for _, file := range pass.Files {
		// –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è main-–ø–∞–∫–µ—Ç–æ–º
		if pass.Pkg.Name() != "main" {
			continue
		}

		// –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å main-—Ñ—É–Ω–∫—Ü–∏—è
		ast.Inspect(file, func(n ast.Node) bool {
			switch x := n.(type) {
			case *ast.FuncDecl:
				if x.Name.Name == "main" {
					return true
				}
			default:
			}
			return true
		})

		// —Ñ—É–Ω–∫—Ü–∏–µ–π ast.Inspect –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —É–∑–ª–∞–º AST
		ast.Inspect(file, func(node ast.Node) bool {
			switch x := node.(type) {
			case *ast.ExprStmt: // –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
				osExitFunc(x)
			default:
			}
			return true
		})
	}
	return nil, nil //nolint:nilnil,nolintlint,gocritic
}

// isOsExit –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ - —ç—Ç–æ os.Exit.
func isOsExit(call *ast.CallExpr) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–∑–æ–≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, os.Exit)
	if sel, ok := call.Fun.(*ast.SelectorExpr); ok {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É os
		if ident, ok := sel.X.(*ast.Ident); ok && ident.Name == "os" && sel.Sel.Name == "Exit" {
			return true
		}
	}
	return false
}
